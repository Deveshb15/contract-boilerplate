import React from "react";
import Head from "next/head";
import { useAccount, useConnect } from 'wagmi'


export const useIsMounted = () => {
	const [mounted, setMounted] = React.useState(false)
	React.useEffect(() => setMounted(true), [])
	return mounted
}

export default function Home() {
	const isMounted = useIsMounted()
	const [{ data: connectData, error: connectError }, connect] = useConnect()
	const [{ data: accountData }, disconnect] = useAccount({
		fetchEns: true,
	})

	// const CONTRACT_ADDRESS = useRef("");
	// const ABI = useRef("");

	// const checkContract = async (e) => {
	// 	try {
	// 		e.preventDefault();

	// 		let contract_address = CONTRACT_ADDRESS.current.value;
	// 		let abi = ABI.current.value;
	// 		abi = JSON.parse(abi);
	// 		// console.log(contract_address)
	// 		// console.log(abi)
	// 		const provider = new ethers.providers.Web3Provider(ethereum)
    //         const signer = provider.getSigner()
	// 		const contract = new ethers.Contract(contract_address, abi, signer);
	// 		console.log(contract);
	// 		console.log(contract.address);
    //         let balance = await contract.balanceOf(account);
    //         console.log(ethers.BigNumber.from(balance));
	// 	} catch (err) {
	// 		console.log(err);
	// 	}
	// };

	// const renderContainer = () => (
	// 	<div className={styles.renderContainer}>
	// 		<p>Connected Wallet: {account}</p>
	// 		<form onSubmit={(e) => checkContract(e)}>
	// 			<div>
	// 				<label htmlFor="address">CONTRACT_ADDRESS: </label>
	// 				<input ref={CONTRACT_ADDRESS} type="text" id="address" />
	// 			</div>
	// 			<div
	// 				style={{ margin: "12px 0px", display: "flex", alignItems: "center" }}
	// 			>
	// 				<label htmlFor="abi">ABI:</label>
	// 				<textarea ref={ABI} id="abi" />
	// 			</div>
	// 			<button className={styles.button} type="submit">
	// 				Get contract
	// 			</button>
	// 		</form>
	// 	</div>
	// );

	return (
		<div>
			<Head>
				<title>Boilerplate for contract interaction</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className="flex flex-col justify-center items-center min-h-screen">
				<h1 className="text-4xl font-bold">Connect wallet!</h1>
				
				{
					(isMounted && !accountData) && (
						connectData.connectors.map((connector) => (
							<button
								className="my-2 px-2 py-1 border rounded-xl bg-black text-white hover:bg-white hover:text-black"
								disabled={!connector.ready}
								key={connector.id}
								onClick={() => connect(connector)}
							>
								{connector.name}
								{!connector.ready && ' (unsupported)'}
							</button>
						))
					)
				}

				{accountData && (
					<div className="flex flex-col justify-center items-center">
						<div className="mt-2">
							<p>Connected Account:  
								{accountData.ens?.name
							? `${accountData.ens?.name} (${accountData.address})`
							: accountData.address}</p>
						</div>
						<button 
							className="my-2 px-2 py-1 border rounded-xl bg-black text-white hover:bg-white hover:text-black"
							onClick={disconnect}
						>Disconnect</button>
					</div>
				)}

				{connectError && <div>{connectError?.message ?? 'Failed to connect'}</div>}
			</main>
		</div>
	);
}
