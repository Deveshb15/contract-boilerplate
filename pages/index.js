import React from "react";
import Head from "next/head";
import { useAccount, useBalance,useConnect } from 'wagmi'


export const useIsMounted = () => {
	const [mounted, setMounted] = React.useState(false)
	React.useEffect(() => setMounted(true), [])
	return mounted
}

export default function Home() {
	const isMounted = useIsMounted()
	const [{ data: connectData, error: connectError }, connect] = useConnect()
	const [{ data: accountData }, disconnect] = useAccount({
		fetchEns: true,
	})

	const [{ data: balanceData, error: balanceError, loading: balanceLoading }, getBalance] = useBalance({
		addressOrName: accountData?.address,
	})

	return (
		<div>
			<Head>
				<title>Boilerplate for contract interaction</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className="flex flex-col justify-center items-center min-h-screen">
				<h1 className="text-4xl font-bold">Connect wallet!</h1>
				
				{
					(isMounted && !accountData) && (
						connectData.connectors.map((connector) => (
							<button
								className="my-2 px-2 py-1 border rounded-xl bg-black text-white hover:bg-white hover:text-black"
								disabled={!connector.ready}
								key={connector.id}
								onClick={() => connect(connector)}
							>
								{connector.name}
								{!connector.ready && ' (unsupported)'}
							</button>
						))
					)
				}

				{accountData && (
					<div className="flex flex-col justify-center items-center">
						<div className="mt-2 flex flex-col">
							<p>Connected Account:  
								{accountData.ens?.name
							? `${accountData.ens?.name} (${accountData.address})`
							: accountData.address}</p>
							<p>Balance: {balanceLoading && 'Loading...'} {balanceData?.formatted} {balanceData?.symbol}</p>
						</div>
						<button 
							className="my-2 px-2 py-1 border rounded-xl bg-black text-white hover:bg-white hover:text-black"
							onClick={disconnect}
						>Disconnect</button>
					</div>
				)}

				{connectError && <div>{connectError?.message ?? 'Failed to connect'}</div>}
			</main>
		</div>
	);
}
